#!/usr/bin/env python

import subprocess as sp
import sys, readline, traceback, os, re

class Completer:
    def __init__(self):
        wordsfile = '/usr/share/dict/words'
        try:
            with open(wordsfile) as f:
                self.words = [s.strip() for s in f]
        except IOError:
            print "Warning: Failed to read words file '{}'. Completion won't work.".format(wordsfile)
            self.words = []
        self.prefix = None
        self.ans = []

    def complete(self, prefix, index):
        try:
            if self.prefix != prefix:
                self.ans = [w for w in self.words if w.startswith(prefix)]

            self.prefix = prefix
            if index < len(self.ans):
                return self.ans[index]
            return None
        except:
            print traceback.format_exc()

if __name__ == '__main__':
    readline.parse_and_bind('tab: complete')
    readline.set_completer(Completer().complete)
    log_filename = os.path.expanduser('~/dshell_log')

    while True:
        try:
            word = raw_input('d> ')
        except (EOFError, KeyboardInterrupt):
            print 'bye'
            sys.exit(0)
        word = word.strip()
        if not word:
            continue

        dictproc = sp.Popen(['dict', word], stdout=sp.PIPE)
        response = dictproc.communicate()[0]
        print response
        m = re.search('{}'.format(word), response)
        if not m:
#            print 'Failed to match, skipping logging'
            continue
        card = response[m.start():]
        with open(log_filename, 'a') as f:
            f.write('{}\t"{}"\n'.format(word, card.replace('\n','<br>').replace('\t', '  ')))
